esphome:
  name: esphome-web-efcc0f
  friendly_name: ESP8266-1
  min_version: 2024.11.0
  name_add_mac_suffix: false

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: !secret wifi_ssid_fallback
    password: !secret wifi_password_fallback

captive_portal:

# Allow provisioning Wi-Fi via serial
improv_serial:


# To have a "next url" for improv serial
web_server:

i2c:
  sda: GPIO14
  scl: GPIO12
  scan: True
  frequency: 400kHz

display:
  - platform: ssd1306_i2c
    id: mydisplay
    model: "SSD1306 128x64"
    address: 0x3C
    pages:
      - id: page1
        lambda: |-
          it.print(0, 0, id(montserrat), "Controleur PWM");
          it.print(0, 16, id(unbuntu), "Etat 1: ");
          it.print(it.get_width() - 5, 16, id(unbuntu), TextAlign::RIGHT, id(myfan).state ? "ON" : "OFF");
          it.print(0, 31, id(unbuntu), "Vitesse 1: ");
          it.print(it.get_width() - 5, 31, id(unbuntu), TextAlign::RIGHT, 
                  (std::to_string(int(id(myfan).speed)) + " %").c_str());
          it.print(0, 46, id(unbuntu), "Freq 1:");
          it.print(it.get_width() - 5, 46, id(unbuntu), TextAlign::RIGHT,
            (std::to_string(int(id(pwmFreq).state)) + " Hz").c_str());
        
      - id: page2
        lambda: |-
          it.print(0, 0, id(montserrat), "Controleur PWM");
          it.print(0, 16, id(unbuntu), "Etat 2: ");
          it.print(it.get_width() - 5, 16, id(unbuntu), TextAlign::RIGHT, id(myfan).state ? "ON" : "OFF");
          it.print(0, 31, id(unbuntu), "Vitesse 2: ");
          it.print(it.get_width() - 5, 31, id(unbuntu), TextAlign::RIGHT, 
                  (std::to_string(int(id(myfan).speed)) + " %").c_str());
          it.print(0, 46, id(unbuntu), "Freq 2:");
          it.print(it.get_width() - 5, 46, id(unbuntu), TextAlign::RIGHT,
            (std::to_string(int(id(pwmFreq).state)) + " Hz").c_str());
     
      - id: page3
        lambda: |-
          it.print(0, 0, id(montserrat), "Controleur PWM");
          it.print(0, 16, id(unbuntu), "Etat 3: ");
          it.print(it.get_width() - 5, 16, id(unbuntu), TextAlign::RIGHT, id(myfan).state ? "ON" : "OFF");
          it.print(0, 31, id(unbuntu), "Vitesse 3: ");
          it.print(it.get_width() - 5, 31, id(unbuntu), TextAlign::RIGHT, 
                  (std::to_string(int(id(myfan).speed)) + " %").c_str());
          it.print(0, 46, id(unbuntu), "Freq 3:");
          it.print(it.get_width() - 5, 46, id(unbuntu), TextAlign::RIGHT,
            (std::to_string(int(id(pwmFreq).state)) + " Hz").c_str());
        
      - id: page4
        lambda: |-
          it.print(0, 0, id(montserrat), "Controleur PWM");
          it.printf(it.get_width() / 2, it.get_height() / 2, id(unbuntu32), TextAlign::CENTER, "%.0f W", id(puissance).state);



font:
  - file: "fonts/montserrat/Montserrat-Medium.otf"
    id: montserrat
    size: 14
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu
    size: 16
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu32
    size: 32

interval:
  - interval: 10s
    then:
      - display.page.show_next: mydisplay
      - component.update: mydisplay

binary_sensor:
  - platform: gpio
    name: "Bouton_next"
    internal: true
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
    id: bouton_next
    on_press:
      then:
        - display.page.show_next: mydisplay
        - component.update: mydisplay
  
  - platform: gpio
    name: "Bouton_prev"
    internal: true
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
    id: bouton_prev
    on_press:
      then:
        - display.page.show_previous: mydisplay
        - component.update: mydisplay
  
  - platform: gpio
    name: "Bouton_home"
    internal: true
    pin:
      number: GPIO1
      mode: INPUT_PULLUP
    id: bouton_home
    on_press:
      then:
        - display.page.show: page1
        - component.update: mydisplay

  - platform: gpio
    name: "Bouton_end"
    internal: true
    pin:
      number: GPIO15
      mode: INPUT_PULLUP
    id: bouton_end
    on_press:
      then:
        - display.page.show: page4
        - component.update: mydisplay


output:
  - platform: esp8266_pwm
    pin: GPIO16
    id: pwm

number:
  - platform: template
    id: pwmFreq
    name: PWM Frequency
    icon: mdi:sync
    optimistic: true
    unit_of_measurement: 'Hz'
    min_value: 10
    max_value: 100000
    initial_value: 50
    step: 10
    on_value:
      lambda: |-
        int newFreq = (int)(id(pwmFreq).state);
        id(pwm).update_frequency(newFreq);

fan:
  - platform: speed
    id: myfan
    output: pwm
    name: "PWM ESP8266"
    restore_mode: ALWAYS_OFF
    on_turn_on:
    - logger.log: "PWM activé"
    - lambda: id(mydisplay).update();
    on_turn_off:
    - logger.log: "PWM désactivé"
    - lambda: id(mydisplay).update();
    on_speed_set:
    - logger.log:
        format: "PWM speed was changed to %d %"
        args: [ x ]
    - lambda: id(mydisplay).update();

sensor:
# WiFi sensor
  - platform: wifi_signal
    name: "Device WiFi Signal dBm"
    id: "device_wifi_signal_dbm"
    update_interval: 1.0min
    entity_category: "diagnostic"
    internal: true

  - platform: homeassistant
    id: puissance
    entity_id: sensor.consommation_reseau