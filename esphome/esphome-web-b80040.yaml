substitutions:
  name: esphome-web-b80040
  friendly_name: ESP32-3

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev
  on_boot:
    then:
    ######################################################
    # Must be turned on before setting frequency & level
    ######################################################
    - output.turn_on: led
    ######################################################
    # Frequency sets the wave size
    ######################################################
    - output.ledc.set_frequency:
        id: led
        frequency: "1000Hz"
    ######################################################
    # level sets the %age time the PWM is on
    ######################################################
    - output.set_level:
        id: led
        level: "50%"
  includes:
    - zmpt101b_custom_sensor.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# ECRAN OLED SPI
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO22

display:
  - platform: ssd1306_spi
    id: mydisplay
    model: "SSD1306 128x64"
    cs_pin: GPIO05
    dc_pin: GPIO16
    reset_pin: GPIO17
    pages:
      - id: page1
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "ESP32-3");

          // Mémoire libre
          it.printf(0, 14, id(unbuntu), "Free Mem:");
          it.printf(it.get_width() - 5, 14, id(unbuntu), TextAlign::RIGHT, "%d / %d KB", int(id(esp32_3_memory).state),int(id(esp32_3_totalmemory).state));

          // Uptime
          it.printf(0, 24, id(unbuntu), "UP:");
          it.printf(it.get_width() - 5, 24, id(unbuntu), TextAlign::RIGHT, "%.0f min", id(esp32_3_uptime).state / 60.0);

          // Signal WiFi
          it.printf(0, 34, id(unbuntu), "Wifi:");
          it.printf(it.get_width() - 5, 34, id(unbuntu), TextAlign::RIGHT, "%.0f dB", id(esp32_3_wifi_signal_db).state);

          // Température interne
          it.printf(0, 44, id(unbuntu), "Temp:");
          it.printf(it.get_width() - 5, 44, id(unbuntu), TextAlign::RIGHT, "%.1f°C", id(esp32_3_internal_temperature).state);

          // Adresse IP
          it.printf(0, 54, id(unbuntu), "IP:");
          it.printf(it.get_width() - 5, 54, id(unbuntu), TextAlign::RIGHT, "%s", id(esp32_3_ipaddress).state.c_str());
      - id: page2
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "PAGE 2");

interval:
  - interval: 10s
    then:
      - display.page.show_next: mydisplay
      - component.update: mydisplay

font:
  - file: "fonts/montserrat/Montserrat-Medium.otf"
    id: montserrat
    size: 16
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu
    size: 12
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu_16
    size: 16

#LED : 
output:
  - platform: ledc
    pin: GPIO33
    id: led

light:
  - platform: monochromatic
    output: led
    name: "Test Led"

#Tension
sensor:
  - platform: adc
    pin: GPIO32
    name: "Test Tension secteur"
    update_interval: 10s
    accuracy_decimals: 2
    attenuation: auto

  - platform: custom
    lambda: |-
      auto my_sensor = new ZMPT101BSensor();
      App.register_component(my_sensor);
      return {my_sensor};
    sensors:
      name: "Test Tension secteur ZMPT101B"
      id: tension_secteur_zmpt101b
      unit_of_measurement: V
      accuracy_decimals: 1
      state_class: "measurement"
      #pin: GPIO32 défini par A4 dans le .h

  - platform: adc
    pin: GPIO35
    id: tension_secteur_long
    name: "Test Tension secteur Long"
    update_interval: 10s
    accuracy_decimals: 0
    attenuation: auto
    filters:
      - calibrate_polynomial:
          degree: 1
          datapoints:
            # Map 0.0 (from sensor) to 0.0 (true value)
            - 3.14 -> 0.0
            - 0.08 -> 240.0
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("DEBUG", "Valeur brute: %.2f V", id(tension_secteur_long).raw_state);
            ESP_LOGD("DEBUG", "Valeur corrigée: %.2f V", id(tension_secteur_long).state);


  - platform: template
    id: esp32_3_memory
    icon: mdi:memory
    name: "Free Memory"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"
    update_interval: 30s
    internal: true
  - platform: template
    id: esp32_3_totalmemory
    icon: mdi:memory
    name: "Memory"
    lambda: return heap_caps_get_total_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"
    update_interval: 30s
    internal: true
  - platform: uptime
    name: Uptime
    id: esp32_3_uptime
    update_interval: 60s
    internal: true
  - platform: wifi_signal 
    name: RSSI
    id: esp32_3_wifi_signal_db
    entity_category: "diagnostic"
    update_interval: 30s
    internal: true
  - platform: internal_temperature
    id: esp32_3_internal_temperature
    name: "Internal Temperature"
    update_interval: 30s
    internal: true
    
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: esp32_3_ipaddress
      update_interval: 30s
      internal: true