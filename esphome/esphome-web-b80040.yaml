substitutions:
  name: esp32-3
  friendly_name: ESP32-TEST

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev
  on_boot:
    then:
      - light.turn_on:
          id: led_rgb
          brightness: 50%
          red: 0
          green: 0
          blue: 1
#  includes:
#    - zmpt101b_custom_sensor.h

esp32:
  board: esp32dev
  framework:
    type: arduino

bluetooth_proxy:
    active: True

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret wifi_ssid_fallback
    password: !secret wifi_password_fallback
# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
#esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
web_server:

# ECRAN OLED SPI
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO22

display:
  - platform: ssd1306_spi
    id: mydisplay
    model: "SSD1306 128x64"
    cs_pin: GPIO5
    dc_pin: GPIO016
    reset_pin: GPIO17
    pages:
      - id: page1
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "ESP32-3");

          // Mémoire libre
          it.printf(0, 14, id(unbuntu), "Free Mem:");
          it.printf(it.get_width() - 5, 14, id(unbuntu), TextAlign::RIGHT, "%d / %d KB", int(id(esp32_3_memory).state),int(id(esp32_3_totalmemory).state));

          // Uptime
          it.printf(0, 24, id(unbuntu), "UP:");
          it.printf(it.get_width() - 5, 24, id(unbuntu), TextAlign::RIGHT, "%.0f min", id(esp32_3_uptime).state / 60.0);

          // Signal WiFi
          it.printf(0, 34, id(unbuntu), "Wifi:");
          it.printf(it.get_width() - 5, 34, id(unbuntu), TextAlign::RIGHT, "%.0f dB", id(esp32_3_wifi_signal_db).state);

          // Température interne
          it.printf(0, 44, id(unbuntu), "Temp:");
          it.printf(it.get_width() - 5, 44, id(unbuntu), TextAlign::RIGHT, "%.1f°C", id(esp32_3_internal_temperature).state);

          // Adresse IP
          it.printf(0, 54, id(unbuntu), "IP:");
          it.printf(it.get_width() - 5, 54, id(unbuntu), TextAlign::RIGHT, "%s", id(esp32_3_ipaddress).state.c_str());
      - id: page2
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "PAGE 2");
          // Adresse IP
          it.printf(0, 54, id(unbuntu), "IP:");
          it.printf(it.get_width() - 5, 54, id(unbuntu), TextAlign::RIGHT, "%s", id(esp32_3_ipaddress).state.c_str());
      - id: page3
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "PAGE 3");
          // Adresse IP
          it.printf(0, 54, id(unbuntu), "IP:");
          it.printf(it.get_width() - 5, 54, id(unbuntu), TextAlign::RIGHT, "%s", id(esp32_3_ipaddress).state.c_str());
      - id: page4
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "PAGE 4");
          // Adresse IP
          it.printf(0, 54, id(unbuntu), "IP:");
          it.printf(it.get_width() - 5, 54, id(unbuntu), TextAlign::RIGHT, "%s", id(esp32_3_ipaddress).state.c_str());
      - id: page5
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "PAGE 5");
          // Adresse IP
          it.printf(0, 54, id(unbuntu), "IP:");
          it.printf(it.get_width() - 5, 54, id(unbuntu), TextAlign::RIGHT, "%s", id(esp32_3_ipaddress).state.c_str());
      - id: page6
        lambda: |-
          it.print(it.get_width() / 2, 8, id(unbuntu_16), TextAlign::CENTER, "PAGE 6");
          // Adresse IP
          it.printf(0, 54, id(unbuntu), "IP:");
          it.printf(it.get_width() - 5, 54, id(unbuntu), TextAlign::RIGHT, "%s", id(esp32_3_ipaddress).state.c_str());

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton UP"
    id: bouton_up
    on_press:
      then:
        - display.page.show: page1
        - component.update: mydisplay
  - platform: gpio
    pin:
      number: GPIO12
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton DOWN"
    id: bouton_down
    on_press:
      then:
        - display.page.show: page6
        - component.update: mydisplay
  - platform: gpio
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton LEFT"
    id: bouton_left
    on_press:
      then:
        - display.page.show_previous: mydisplay
        - component.update: mydisplay
  - platform: gpio
    pin:
      number: GPIO27
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton RIGHT"
    id: bouton_right
    on_press:
      then:
        - display.page.show_next: mydisplay
        - component.update: mydisplay
  - platform: gpio
    pin:
      number: GPIO26
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton MID"
    id: bouton_mid
    on_press:
      then:
        - display.page.show: page3
        - component.update: mydisplay
  - platform: gpio
    pin:
      number: GPIO25
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton SET"
    id: bouton_set
    on_press:
      then:
        - display.page.show: page2
        - component.update: mydisplay
  - platform: gpio
    pin:
      number: GPIO33
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton RESET"
    id: bouton_reset
    on_press:
      then:
        - display.page.show: page4
        - component.update: mydisplay
  - platform: gpio
    pin:
      number: GPIO23
      mode: INPUT_PULLUP
      inverted: false
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    name: "Bouton rouge"
    id: bouton_rouge
    on_press:
      then:
        - lambda: |-
            id(last_press_time) = millis();
        # Après 1 seconde, si le bouton est toujours pressé, active la variation de luminosité
        - delay: 1000ms
        - lambda: |-
            if (id(bouton_rouge).state) {
              id(dimming_active) = true;
            }
    on_release:
      then:
        - lambda: |-
            if (!id(dimming_active)) {
              // Appui court : changement de couleur (cycle)
              id(color_index) = (id(color_index) + 1) % 7;
              auto call = id(led_rgb).turn_on();
              call.set_brightness(1.0);
              if (id(color_index) == 0) {
                // Rouge
                call.set_red(1);
                call.set_green(0);
                call.set_blue(0);
              } else if (id(color_index) == 1) {
                // Vert
                call.set_red(0);
                call.set_green(1);
                call.set_blue(0);
              } else if (id(color_index) == 2) {
                // Bleu
                call.set_red(0);
                call.set_green(0);
                call.set_blue(1);
              } else if (id(color_index) == 3) {
                // VertRouge
                call.set_red(1);
                call.set_green(1);
                call.set_blue(0);
              } else if (id(color_index) == 4) {
                // VertBleu
                call.set_red(0);
                call.set_green(1);
                call.set_blue(1);
              } else if (id(color_index) == 5) {
                // RougeBleu
                call.set_red(1);
                call.set_green(0);
                call.set_blue(1);
              } else {
                // FULL
                call.set_red(1);
                call.set_green(1);
                call.set_blue(1);
              }
              call.perform();
            } else {
              // Appui long : on arrête la variation de luminosité
              id(dimming_active) = false;
            }
interval:
  - interval: 10s
    then:
      - display.page.show_next: mydisplay
      - component.update: mydisplay
  # Intervalle dédié à la variation de luminosité (toutes les 100ms)
  - interval: 100ms
    then:
      - lambda: |-
          if (id(dimming_active)) {
            if (id(increasing)) {
              id(brightness) = id(brightness) + 0.05;  // augmentation de 5%
              if (id(brightness) >= 1.0) {
                id(brightness) = 1.0;
                id(increasing) = false;  // passe en mode diminution
              }
            } else {
              id(brightness) = id(brightness) - 0.05;  // diminution de 5%
              if (id(brightness) <= 0.1) {
                id(brightness) = 0.1;
                id(increasing) = true;   // passe en mode augmentation
              }
            }
            auto call = id(led_rgb).turn_on();
            call.set_brightness(id(brightness));
            // Pendant la variation, on garde la LED bleue
            call.perform();
          }

# Variable pour vérifier si le script est en cours d'exécution
globals:
  - id: last_press_time
    type: int
    initial_value: "0"
  - id: brightness
    type: float
  #    initial_value: '0.5'         # 50 % de luminosité initiale
  - id: increasing
    type: bool
    initial_value: "true"
  - id: dimming_active
    type: bool
    initial_value: "false"
  - id: color_index
    type: int
#    initial_value: '0'

output:
  - platform: ledc
    pin: GPIO15
    id: led_red

  - platform: ledc
    pin: GPIO2
    id: led_green

  - platform: ledc
    pin: GPIO4
    id: led_blue

light:
  - platform: rgb
    name: "LED RGB"
    id: led_rgb
    red: led_red
    green: led_green
    blue: led_blue
    restore_mode: ALWAYS_ON
    default_transition_length: 100ms

font:
  - file: "fonts/montserrat/Montserrat-Medium.otf"
    id: montserrat
    size: 16
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu
    size: 12
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu_16
    size: 16

sensor:
  #Tension

  #  - platform: adc
  #    pin: GPIO32
  #    name: "Test Tension secteur"
  #    update_interval: 10s
  #    accuracy_decimals: 2
  #    attenuation: auto

  #  - platform: custom
  #    lambda: |-
  #      auto my_sensor = new ZMPT101BSensor();
  #      App.register_component(my_sensor);
  #      return {my_sensor};
  #    sensors:
  #      name: "Test Tension secteur ZMPT101B"
  #      id: tension_secteur_zmpt101b
  #      unit_of_measurement: V
  #      accuracy_decimals: 1
  #      state_class: "measurement"
  #      #pin: GPIO32 défini par A4 dans le .h

  #  - platform: adc
  #   pin: GPIO35
  #    id: tension_secteur_long
  #    name: "Test Tension secteur Long"
  #    update_interval: 10s
  #    accuracy_decimals: 0
  #    attenuation: auto
  #    filters:
  #      - calibrate_polynomial:
  #          degree: 1
  #          datapoints:
  #            # Map 0.0 (from sensor) to 0.0 (true value)
  #            - 3.14 -> 0.0
  #            - 0.08 -> 240.0
  #    on_value:
  #      then:
  #        - lambda: |-
  #            ESP_LOGD("DEBUG", "Valeur brute: %.2f V", id(tension_secteur_long).raw_state);
  #            ESP_LOGD("DEBUG", "Valeur corrigée: %.2f V", id(tension_secteur_long).state);

  - platform: template
    id: esp32_3_memory
    icon: mdi:memory
    name: "Free Memory"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"
    update_interval: 30s
    internal: true
  - platform: template
    id: esp32_3_totalmemory
    icon: mdi:memory
    name: "Memory"
    lambda: return heap_caps_get_total_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"
    update_interval: 30s
    internal: true
  - platform: uptime
    name: Uptime
    id: esp32_3_uptime
    update_interval: 60s
    internal: true
  - platform: wifi_signal
    name: RSSI
    id: esp32_3_wifi_signal_db
    entity_category: "diagnostic"
    update_interval: 30s
    internal: true
  - platform: internal_temperature
    id: esp32_3_internal_temperature
    name: "Internal Temperature"
    update_interval: 30s
    internal: true

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: esp32_3_ipaddress
      update_interval: 10s
      internal: true
