substitutions:
  name: esphome-web-b80040
  friendly_name: ESP32-3

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev
  on_boot:
    then:
    ######################################################
    # Must be turned on before setting frequency & level
    ######################################################
    - output.turn_on: led
    ######################################################
    # Frequency sets the wave size
    ######################################################
    - output.ledc.set_frequency:
        id: led
        frequency: "1000Hz"
    ######################################################
    # level sets the %age time the PWM is on
    ######################################################
    - output.set_level:
        id: led
        level: "50%"
  includes:
    - zmpt101b_custom_sensor.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# ECRAN OLED SPI
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO22

display:
  - platform: ssd1306_spi
    model: "SSD1306 128x64"
    cs_pin: GPIO05
    dc_pin: GPIO16
    reset_pin: GPIO17
    lambda: |-
      it.print(0, 0, id(unbuntu_16), "Hello World RED");
      it.print(0, 14, id(unbuntu), "Hello World GREEN");
      it.print(0, 24, id(unbuntu), "Hello World MIXTE");
      it.print(0, 34, id(unbuntu), "Hello World YELLOW");
      it.print(0, 44, id(unbuntu), "Hello World YELLOW");
      it.print(0, 54, id(unbuntu), "Hello World YELLOW");
    rotation: 0
    
font:
  - file: "fonts/montserrat/Montserrat-Medium.otf"
    id: montserrat
    size: 16
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu
    size: 12
  - file: "fonts/unbuntu/UbuntuMono-Regular.ttf"
    id: unbuntu_16
    size: 16

#LED : 
output:
  - platform: ledc
    pin: GPIO33
    id: led


light:
  - platform: monochromatic
    output: led
    name: "Test Led"

#Tension
sensor:
  - platform: adc
    pin: GPIO32
    name: "Test Tension secteur"
    update_interval: 10s
    accuracy_decimals: 2
    attenuation: 12dB

  - platform: custom
    lambda: |-
      auto my_sensor = new ZMPT101BSensor();
      App.register_component(my_sensor);
      return {my_sensor};
    sensors:
      name: "Test Tension secteur2"
      unit_of_measurement: V
      accuracy_decimals: 1
      state_class: "measurement"
      #pin: GPIO32 d√©fini par A4 dans le .h

  - platform: adc
    pin: GPIO35
    name: "Test Tension secteur3"
    update_interval: 10s
    accuracy_decimals: 0
    attenuation: 12dB
    filters:
      - multiply: 80